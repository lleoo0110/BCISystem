function preset = character()
    %% === プリセット情報 ===
    preset_info = struct(...
        'name', 'character', ...
        'description', 'Character Control preset', ...
        'version', '2.1', ...
        'author', 'LLEOO', ...
        'date', '2025-01-26' ...
    );

    %% === トリガーマッピング設定 ===
    trigger_mappings = {
        '安静', 1;         % クラス1：安静状態（基準状態）
        '歩行', 2;       % クラス2：歩行状態
        '回転', 3;       % クラス3：回転状態
    };

    mapping_struct = struct();
    for i = 1:size(trigger_mappings, 1)
        field_name = sprintf('trigger%d', i);
        mapping_struct.(field_name) = struct(...
            'text', trigger_mappings{i,1}, ...
            'value', trigger_mappings{i,2} ...
        );
    end
    
    %% === LSL設定 ===
    lsl = struct(...
        'simulate', struct(...
            'enable', true, ...
            'signal', struct(...
                'alpha', struct(...
                    'freq', 10, ...
                    'amplitude', 20 ...
                ), ...
                'beta', struct(...
                    'freq', 20, ...
                    'amplitude', 10 ...
                ) ...
            ) ...
        ) ...
    );

    %% === データ収集設定 ===
    acquisition = struct(...
        'mode', 'online', ...       % モード選択: 'offline'（解析用）または 'online'（リアルタイム処理用）
        'emg', struct(...           % EMG計測設定
            'enable', true, ...    % EMG計測の有効/無効
            'channels', struct(...
                'channelNum', (1:2), ...
                'names', {{'EMG1', 'EMG2'}}, ...  % EMGチャンネル名
                'count', 2 ...      % EMGチャンネル数
            ), ...
            'sampleRate', 250, ... % EMGサンプリングレート
            'lsl', struct(...
                'streamName', 'OpenBCI-EMG', ...
                'type', 'EMG', ...
                'format', 'float32', ...
                'nominal_srate', 250, ...
                'source_id', 'emg_device' ...
            ) ...
        ), ...
        'save', struct(...
            'enable', true, ...      % データ保存の有効/無効
            'name', 'result', ...      % 保存時のファイル名プレフィックス
            'path', './Experiment Data', ... % データ保存先ディレクトリ
            'saveInterval', 60, ...   % 一時保存を行う間隔（秒）
            'fields', struct(...      % 保存する項目の選択
                'params', true, ...             % 設定情報
                'rawData', true, ...            % 生脳波データ
                'emgData', true, ...            % 筋電位データ
                'labels', true, ...             % イベントマーカー
                'emgLabels', true, ...            % 筋電位マーカー
                'processedData', true, ...      % 前処理済みデータ
                'processedLabel', true, ...     % 処理済みラベル
                'processingInfo', true, ...     % 処理情報
                'classifier', true, ...      % 分類器
                'results', true ...             % 解析結果
            ) ...
        ), ...
        'load', struct(...           % データ読み込み設定
            'enable', true, ...      % データ読み込みの有効/無効
            'filename', '', ...       % 読み込むファイル名（フォルダから選択して読み込み）
            'path', '', ...          % 読み込むファイルのパス（フォルダから選択して読み込み）
            'fields', struct(...      % 保存する項目の選択
                'params', true, ...             % 設定情報
                'rawData', true, ...            % 生脳波データ
                'emgData', true, ...            % 筋電位データ
                'labels', true, ...             % イベントマーカー
                'emgLabels', true, ...            % 筋電位マーカー
                'processedData', true, ...      % 前処理済みデータ
                'processedLabel', true, ...     % 処理済みラベル
                'processingInfo', true, ...     % 処理情報
                'classifier', true, ...      % 分類器
                'results', true ...             % 解析結果
            ) ...
        ) ...
    );

    %% === 通信設定 ===
    udp = struct(...
        'receive', struct(...
            'enable', true, ...         % UDP受信の有効/無効
            'port', 12345, ...          % 受信ポート番号
            'address', '127.0.0.1', ... % 受信アドレス
            'bufferSize', 8192, ...     % 受信バッファサイズ
            'encoding', 'UTF-8', ...    % 文字エンコーディング
            'triggers', struct(...       % トリガー設定
                'enabled', true, ...     % トリガー処理の有効/無効
                'mappings', mapping_struct, ... % トリガーマッピング
                'defaultValue', 0 ...    % デフォルト値
            ) ...
        ), ...
        'send', struct(...
            'enabled', true, ...        % UDP送信の有効/無効
            'port', 54321, ...          % 送信ポート番号
            'address', '127.0.0.1', ... % 送信先アドレス
            'bufferSize', 8192, ...     % 送信バッファサイズ
            'encoding', 'UTF-8' ...     % 文字エンコーディング
        ) ...
    );

    %% === 信号処理設定 ===
    signal = struct(...
        'enable', true, ...           % 信号処理の有効/無効
        'window', struct(...           % 解析窓の設定
            'analysis', 2.0, ...       % 解析窓の長さ（秒）
            'stimulus', 5.0, ...       % 刺激提示時間（秒）
            'bufferSize', 15, ...      % データバッファのサイズ（秒）
            'updateBuffer', 1, ...     % バッファの更新間隔（秒）
            'step', [], ...            % 解析窓のシフト幅：自動計算
            'updateInterval', [] ...    % 更新間隔：自動計算
        ), ...
        'epoch', struct(...            
            'method', 'time', ...      % エポック化方法：'time'または'odd-even'
            'storageType', 'array', ...     % データ形式：'array'または'cell'
            'overlap', 0.25, ...
            'visual', struct(...       % 視覚タスク関連の設定を追加
                'enable', false, ...   % 視覚タスクの有効/無効
                'taskTypes', {'observation',  'imagery'}, ... % タスクタイプ：'observation', 'imagery'
                'observationDuration', 5.0, ... % 観察タスク時間(s)
                'signalDuration', 1.0, ...      % 合図時間(s) 
                'imageryDuration', 5.0 ...      % イメージタスク時間(s)
            ) ...
        ), ...
        'frequency', struct(...         % 周波数解析の設定
            'min', 8, ...              % 解析する最小周波数（Hz）
            'max', 30, ...             % 解析する最大周波数（Hz）
            'bands', struct(...         % 周波数帯域の定義
                'delta', [1 4], ...    % デルタ波帯域（Hz）
                'theta', [4 8], ...    % シータ波帯域（Hz）
                'alpha', [8 13], ...   % アルファ波帯域（Hz）
                'beta',  [13 30], ...  % ベータ波帯域（Hz）
                'gamma', [30 50] ...   % ガンマ波帯域（Hz）
            ) ...
        ), ...
        'preprocessing', struct(...    % 前処理設定
            'artifact', struct(...     % アーティファクト除去設定
                'enable', false, ...
                'method', 'all', ...   % 'all', 'eog', 'emg', 'baseline', 'threshold'
                'thresholds', struct(...
                    'eog', 100, ...    % 眼球運動の閾値(μV)
                    'emg', 100, ...    % 筋電の閾値(μV)
                    'amplitude', 150 ... % 振幅の閾値(μV)
                ), ...
                'windowSize', 1.0 ...   % 解析窓サイズ(秒)
            ), ...
            'baseline', struct(...      % ベースライン補正設定
                'enable', false, ...
                'method', 'interval', ... % 'interval', 'trend', 'dc', 'moving'
                'windowSize', 1.0, ...    % 窓サイズ(秒)
                'overlap', 0.5 ...        % オーバーラップ率
            ), ...
            'downsample', struct(...    % ダウンサンプリング設定
                'enable', false, ...
                'targetRate', 128, ...   % 目標サンプリングレート(Hz)
                'filterOrder', 30 ...    % フィルタ次数
            ), ...
            'filter', struct(...        % フィルタリング設定
                'notch', struct(...     % ノッチフィルタ
                    'enable', false, ...
                    'frequency', [50 60], ... % 除去する周波数
                    'bandwidth', 2 ...    % フィルタの帯域幅（Hz）
                ), ...
                'fir', struct(...       % FIRフィルタ
                    'enable', true, ...
                    'scaledPassband', true, ... % パスバンドのスケーリング
                    'filterOrder', 1024, ...
                    'designMethod', 'window', ...
                    'windowType', 'hamming', ...
                    'passbandRipple', 1, ...
                    'stopbandAttenuation', 60 ...
                ) ...
            ), ...
            'normalize', struct(...     % 正規化設定
                'enable', true, ...     % 正規化の有効/無効
                'type', 'all', ...       % 正規化の種類：'all'または'epoch'
                'method', 'robust' ...   % 正規化方法：'zscore', 'minmax', 'robust'
            ), ...
            'augmentation', struct(...
                'enable', true, ...      % データ拡張を有効化
                'augmentationRatio', 2, ... % 元のデータの2倍に拡張
                'combinationLimit', 2, ...  % 1回の拡張で適用する最大手法数
                'methods', struct(...
                    'noise', struct(...    % ノイズ付加
                        'enable', true, ...
                        'types', {{'gaussian', 'pink'}}, ...
                        'variance', 0.01, ...    % 小さめのノイズ分散
                        'probability', 0.7 ...    % 高確率で適用
                    ), ...
                    'scaling', struct(...   % スケーリング
                        'enable', true, ...
                        'range', [0.95 1.05], ... % 振幅の±5%変動
                        'probability', 0.5 ...
                    ), ...
                    'timeshift', struct(...  % 時間シフト
                        'enable', true, ...
                        'maxShift', 0.05, ... % 最大50msのシフト
                        'probability', 0.5 ...
                    ), ...
                    'mirror', struct(...     % 反転
                        'enable', false, ... % 脳波の場合は無効推奨
                        'probability', 0.2 ...
                    ), ...
                    'channelSwap', struct(...  % チャンネル入れ替え
                        'enable', false, ...
                        'pairs', {{{'F3','F4'}, {'C3','C4'}, {'P3','P4'}}}, ... % 対称な位置のみ
                        'probability', 0.3 ...
                    ) ...
                ) ...
            ) ...
        ) ...
        ) ...
    );

    %% === 特徴抽出設定 ===
    feature = struct(...
        'power', struct(...            % パワー特徴抽出の設定
            'enable', false, ...        % パワー解析の有効/無効
            'method', 'welch', ...     % パワー計算方法: 'welch' または 'filter'
                'normalize', struct(...
                'enable', false, ...    % 正規化の有効/無効
                'methods', {{'relative', 'log'}} ... % 正規化方法: 'relative', 'log', 'zscore', 'db', 'robust'
            ), ...
            'welch', struct(...        % Welch法のパラメータ設定
                'windowType', 'hamming', ... % 窓関数: 'hamming', 'hann', 'blackman'
                'windowLength', 256, ...     % 窓長（サンプル数）
                'overlap', 0.5, ...          % オーバーラップ率（0-1）
                'nfft', 512, ...            % FFTポイント数
                'freqResolution', 0.5, ...   % 周波数分解能（Hz）
                'segmentNum', 8 ...          % 平均化セグメント数
            ), ...
            'filter', struct(...       % フィルタリング法のパラメータ
                'type', 'butter', ...  % フィルタタイプ: 'butter'
                'order', 4 ...         % フィルタ次数（2-8推奨）
            ), ...
            'bands', struct(...         % 周波数帯域の定義
                'names', {{'delta', 'theta', 'alpha', 'beta', 'gamma'}}, ...
                'delta', [0.5 4], ...   % デルタ波帯域（Hz）
                'theta', [4 8], ...     % シータ波帯域（Hz）
                'alpha', [8 13], ...    % アルファ波帯域（Hz）
                'beta',  [13 30], ...   % ベータ波帯域（Hz）
                'gamma', [30 45] ...    % ガンマ波帯域（Hz）
            ) ...
        ), ...
        'faa', struct(...              % FAAExtractor用の設定
            'enable', false, ...
            'channels', struct(...
                'left', [1], ...    % 左前頭葉チャンネル（EPOC Xの場合）
                'right', [14] ...  % 右前頭葉チャンネル（EPOC Xの場合）
            ), ...
            'threshold', 0 ...       % FAA判定の閾値
        ), ...
        'abRatio', struct(...          % ABRatioExtractor用の設定
            'enable', false, ...
            'channels', struct(...
                'left', [1], ...    % 左前頭葉チャンネル（EPOC Xの場合）
                'right', [14] ...  % 右前頭葉チャンネル（EPOC Xの場合）
            ), ...
            'threshold', 1.0 ...       % α/β比の閾値
        ), ...
        'emotion', struct(...          % EmotionExtractor用の設定
            'enable', false, ...
            'channels', struct(...
                'left', [1], ...    % 左前頭葉チャンネル（EPOC Xの場合）
                'right', [14] ...  % 右前頭葉チャンネル（EPOC Xの場合）
            ), ...
            'threshold', 0.3, ...      % 中心領域の判定閾値
            'labels', struct(...
                'states', {{'興奮', '喜び', '快適', 'リラックス', ...
                           '眠気', '憂鬱', '不快', '緊張', '安静'}}, ...
                'neutral', '安静' ...
            ), ...
            'coordinates', struct(...   % 座標変換設定
                'normalizeMethod', 'tanh', ...
                'scaling', 1.0 ...
            ) ...
        ), ...
        'csp', struct(...              % CSPExtractor用の設定
            'enable', false, ...
            'patterns', 7, ...          % 使用するパターン数
            'regularization', 0.05 ...  % 正則化パラメータ
        ) ...
    );

    %% === 分類器設定 ===
    num_classes = size(trigger_mappings, 1);        % クラス数を動的に設定
    
    classifier = struct(...
        'activeClassifier', 'cnn', ...  % アクティブな分類器タイプ: 'svm', 'ecoc', 'cnn'
        'svm', struct(...    % SVMの設定
            'enable', false, ...
            'optimize', true, ...
            'probability', true, ...
            'kernel', 'rbf', ...  % カーネル関数: 'linear', 'rbf', 'polynomial'
            'threshold', struct(...   % 閾値関連の設定
                'rest', 0.5, ...      % デフォルトの安静状態閾値
                'useOptimal', true, ... % 最適閾値を使用するか
                'optimal', [], ...      % 最適閾値（自動設定）
                'range', [0.1:0.05:0.9] ... % 閾値探索の範囲
            ), ...
            'hyperparameters', struct(... % ハイパーパラメータ設定
                'optimizer', 'gridsearch', ...
                'boxConstraint', [0.1, 1, 10, 100], ...
                'kernelScale', [0.1, 1, 10, 100] ...
            ) ...
        ), ...
        'ecoc', struct(...   % ECOCの設定
            'enable', false, ...
            'optimize', false, ...
            'probability', true, ...
            'kernel', 'rbf', ...  % カーネル関数: 'linear', 'rbf', 'polynomial'
            'coding', 'onevsall', ... % コーディング方式: 'onevsall', 'allpairs'
            'learners', 'svm', ...    % 基本学習器: 'svm', 'tree'
            'hyperparameters', struct(... % ハイパーパラメータ設定
                'optimizer', 'gridsearch', ...
                'boxConstraint', [0.1, 1, 10, 100], ...
                'kernelScale', [0.1, 1, 10, 100] ...
            ) ...
        ), ...
        'cnn', struct(...
            'enable', true, ...         % CNNを有効化
            'gpu', true, ...            % GPU使用を有効化
            'optimize', true, ...       % 最適化を有効化
            'architecture', struct(...
                'numClasses', num_classes, ...  % クラス数は動的に設定
                'convLayers', struct(...
                    'conv1', struct(...
                        'size', [3 3], ...
                        'filters', 32, ...
                        'stride', 1, ...
                        'padding', 'same' ...
                    ), ...
                    'conv2', struct(...
                        'size', [3 3], ...
                        'filters', 64, ...
                        'stride', 1, ...
                        'padding', 'same' ...
                    ), ...
                    'conv3', struct(...
                        'size', [3 3], ...
                        'filters', 128, ...
                        'stride', 1, ...
                        'padding', 'same' ...
                    ) ...
                ), ...
                'poolLayers', struct(...
                    'pool1', struct('size', 2, 'stride', 2), ...
                    'pool2', struct('size', 2, 'stride', 2), ...
                    'pool3', struct('size', 2, 'stride', 2) ...
                ), ...
                'dropoutLayers', struct(...
                    'dropout1', 0.3, ...  % 入力層に近い層は低めに
                    'dropout2', 0.4, ...  % 中間層は中程度に
                    'dropout3', 0.5 ...   % 出力層に近い層は高めに
                ), ...
                'batchNorm', true, ...    % バッチ正規化を有効化
                'fullyConnected', [256 128] ...  % 全結合層のユニット数
            ), ...
            'training', struct(...
                'optimizer', struct(...
                    'type', 'adam', ...           % Adamオプティマイザを使用
                    'learningRate', 0.0005, ...   % 学習率
                    'beta1', 0.9, ...             % 一次モーメント係数
                    'beta2', 0.999, ...           % 二次モーメント係数
                    'epsilon', 1e-8 ...           % 数値安定性のための小さな値
                ), ...
                'maxEpochs', 150, ...            % 最大エポック数
                'miniBatchSize', 64, ...         % ミニバッチサイズ
                'shuffle', 'every-epoch', ...     % エポックごとにシャッフル
                'validation', struct(...
                    'enable', false, ...           % 検証を有効化
                    'frequency', 5, ...           % 5エポックごとに検証
                    'patience', 15, ...           % Early Stoppingの待機エポック数
                    'holdout', 0.2, ...          % 検証データの割合
                    'kfold', 5 ...               % クロスバリデーションの分割数
                ), ...
                'regularization', struct(...      % 正則化設定
                    'l2', 0.0001, ...            % L2正則化係数
                    'gradientClipping', true, ... % 勾配クリッピングを有効化
                    'maxGradient', 1.0 ...       % 最大勾配値
                ) ...
            ), ...
            'optimization', struct(...           % ハイパーパラメータ最適化設定
                'searchSpace', struct(...
                    'learningRate', [0.0001, 0.001], ...      % 学習率の探索範囲
                    'miniBatchSize', [32, 64], ...            % バッチサイズの探索範囲
                    'kernelSize', {[3,3], [5,5]}, ...         % カーネルサイズの選択肢
                    'numFilters', [32, 64, 128], ...          % フィルタ数の選択肢
                    'dropoutRate', [0.2, 0.5], ...            % ドロップアウト率の探索範囲
                    'fcUnits', [128, 256, 512] ...           % 全結合層ユニット数の選択肢
                ), ...
                'searchStrategy', struct(...                  % 探索戦略の設定
                    'method', 'bayesian', ...                 % ベイジアン最適化を使用
                    'acquisitionFcn', 'expected-improvement', ... % 獲得関数の設定
                    'numIterations', 30 ...                   % 探索反復回数
                ) ...
            ) ...
        ), ...
        'evaluation', struct(...        % 評価設定
            'enable', true, ...         % 評価機能の有効/無効
            'method', 'kfold', ...      % 評価方法
            'kfold', 5, ...             % 分割数
            'holdoutRatio', 0.2, ...    % ホールドアウト比率
            'metrics', struct(...        % 評価指標の設定
                'accuracy', true, ...    % 正解率
                'precision', true, ...   % 適合率
                'recall', true, ...      % 再現率
                'f1score', true, ...    % F1スコア
                'auc', true, ...        % AUC
                'confusion', true ...    % 混同行列
            ), ...
            'visualization', struct(...   % 可視化設定
                'enable', true, ...      % 可視化機能の有効/無効
                'confusionMatrix', true, ... % 混同行列の表示
                'roc', true, ...            % ROC曲線の表示
                'learningCurve', true, ...  % 学習曲線の表示
                'featureImportance', true ... % 特徴量重要度の表示
            ) ...
        ) ...
    );

    %% === GUI表示設定 ===
    gui = struct(...
        'display', struct(...
            'visualization', struct(...
                'refreshRate', 0.2, ...     % 表示更新レート（秒）
                'enable', struct(...        % 表示項目の有効/無効設定
                    'rawData', true, ...    % 生データの表示
                    'emgData', true, ... % 処理済みデータの表示
                    'spectrum', true, ...   % スペクトル表示
                    'ersp', true ...        % 事象関連スペクトル表示
                ), ...
                'channels', struct(...
                    'eeg', struct(...
                        'display', [1 2 3], ...    % 表示するEEGチャンネル番号（複数選択可）
                        'names', {{'AF3','F7','F3'}} ...  % 表示するチャンネル名
                    ), ...
                    'emg', struct(...
                        'display', [1 2], ...        % 表示するEMGチャンネル番号（複数選択可）
                        'names', {{'EMG1','EMG2'}} ...   % 表示するチャンネル名
                    ) ...
                ), ...
                'scale', struct(...         % 表示スケールの設定
                    'auto', true, ...       % 自動スケーリング
                    'raw', [-100 100], ... % 生データの表示範囲（μV）
                    'emg', [-1000 1000], ... % 処理済みデータの表示範囲（μV）
                    'freq', [0 50], ...     % 周波数表示範囲（Hz）
                    'power', [0.01 100], ... % パワー表示範囲（μV²/Hz）
                    'displaySeconds', 5 ... % 時系列データの表示時間幅（秒）
                ), ...
                'showBands', true, ...      % 周波数帯域の表示
                'ersp', struct(...          % ERSP表示の詳細設定
                    'scale', [-10 40], ...  % ERSPの表示範囲（dB）
                    'time', [0 5], ...     % 時間範囲（秒）
                    'baseline', [-1 0], ... % ベースライン期間（秒）
                    'freqRange', [1 50], ... % 周波数範囲（Hz）
                    'numFreqs', 50, ...     % 周波数分割数
                    'method', 'wavelet', ... % 解析手法
                    'colormap', struct(...   % カラーマップ設定
                        'type', 'jet', ...   % タイプ
                        'reverse', false, ... % カラーマップの反転
                        'limit', 'sym', ...  % 制限方法
                        'background', 'white' ... % 背景色
                    ) ...
                ) ...
            ) ... 
        ), ...
        'slider', struct(...              % スライダー設定
            'enable', false, ...          % スライダーの有効/無効
            'position', [800 400 400 200], ... % 位置とサイズ
            'defaultValue', 1, ...        % デフォルト値
            'minValue', 1, ...            % 最小値
            'maxValue', 9, ...            % 最大値
            'steps', 9, ...               % ステップ数
            'title', 'Label Slider' ...   % ウィンドウタイトル
        ) ...
    );

    %% === プリセット構造体の構築 ===
    preset = struct();
    preset.info = preset_info;
    preset.acquisition = acquisition;
    preset.lsl = lsl;
    preset.udp = udp;
    preset.signal = signal;
    preset.feature = feature;
    preset.classifier = classifier;
    preset.gui = gui;
end