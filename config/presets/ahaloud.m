function preset = template()
    %% === プリセット情報 ===
    preset_info = struct(...
        'name', 'ahaloud', ...
        'description', 'Ah Aluod preset', ...
        'version', '1.0', ...
        'author', 'LLEOO', ...
        'date', '2025-05-30' ...
    );

    %% === トリガーマッピング設定 ===
    % トリガー値とクラスラベルの対応付け
    % 形式: {'状態名', トリガー値}
    trigger_mappings = {
        '発声', 1;
    };

    % トリガーマッピング構造体の生成
    mapping_struct = struct();
    for i = 1:size(trigger_mappings, 1)
        field_name = sprintf('trigger%d', i);
        mapping_struct.(field_name) = struct(...
            'text', trigger_mappings{i,1}, ...  % トリガーテキスト
            'value', trigger_mappings{i,2} ...   % トリガー値 (1-255)
        );
    end
    
    %% === LSL設定 ===
    % Lab Streaming Layer通信の設定
    lsl = struct(...
        'simulate', struct(...           % シミュレーションモード設定
            'enable', false, ...          % true/false: シミュレーション有効/無効
            'signal', struct(...         % シミュレーション信号の設定
                'alpha', struct(...      % α波シミュレーション
                    'freq', 10, ...      % 周波数 (8-13 Hz)
                    'amplitude', 20 ...   % 振幅 (μV)
                ), ...
                'beta', struct(...       % β波シミュレーション
                    'freq', 20, ...      % 周波数 (13-30 Hz)
                    'amplitude', 10 ...   % 振幅 (μV)
                ) ...
            ) ...
        ) ...
    );

    %% === データ収集設定 ===
    % データ収集に関する基本設定
    acquisition = struct(...
        'mode', 'offline', ...           % モード: 'online'/'offline'
        'save', struct(...             % データ保存設定
            'saveInterval', 60, ...    % 一時保存間隔 (30-300 秒)
            'batchSave', true, ...    % 複数ファイル選択時の一括保存
            'deleteTempFiles', true ... % 一時ファイルの削除フラグ
        ), ...
        'emg', struct(...               % EMG計測の設定
            'enable', false, ...        % true/false: EMG計測有効/無効
            'sampleRate', 250, ...      % サンプリングレート
            'channels', struct(...      % EMGチャンネル設定
                'channelNum', (1), ...   % チャンネル番号 (配列)
                'names', {{'EMG1'}}, ... % チャンネル名
                'count', 1 ...          % チャンネル数 (1-8)
            ), ...
            'lsl', struct(...           % EMG用LSL設定
                'streamName', 'OpenBCI-EMG', ... % ストリーム名
                'type', 'EMG', ...      % データタイプ: 'EMG'/'EEG'
                'format', 'float32', ... % データ形式: 'float32'/'double64'
                'nominal_srate', 250, ... % 公称サンプリングレート (Hz)
                'source_id', 'emg_device' ... % ソースID
            ) ...
        ) ...
    );

    %% === 通信設定 ===
    % UDP通信の設定
    udp = struct(...
        'receive', struct(...          % UDP受信設定
            'enable', true, ...        % true/false: UDP受信有効/無効
            'port', 12345, ...         % 受信ポート番号 (1024-65535)
            'address', '127.0.0.1', ... % 受信アドレス (IPv4形式)
            'bufferSize', 8192, ...    % バッファサイズ (1024-65535 bytes)
            'encoding', 'UTF-8', ...   % エンコーディング (UTF-8/ASCII/SJIS)
            'triggers', struct(...     % トリガー設定
                'enabled', true, ...   % true/false: トリガー処理有効/無効
                'mappings', mapping_struct, ... % トリガーマッピング
                'defaultValue', 0 ...  % デフォルトトリガー値 (0-255)
            ) ...
        ), ...
        'send', struct(...           % UDP送信設定
            'enabled', true, ...     % true/false: UDP送信有効/無効
            'port', 54321, ...       % 送信ポート番号 (1024-65535)
            'address', '127.0.0.1', ... % 送信先アドレス (IPv4形式)
            'bufferSize', 8192, ...  % バッファサイズ (1024-65535 bytes)
            'encoding', 'UTF-8' ...  % エンコーディング (UTF-8/ASCII/SJIS)
        ) ...
    );

    %% === 信号処理設定 ===
    % 信号処理パラメータの設定
    signal = struct(...
        'enable', true, ...           % true/false: 信号処理有効/無効
        'window', struct(...          % 解析窓の設定
            'epochDuration', 1.5, ... % エポック時間長 (0.5-10.0 秒) 
            'timeRange', {{[0.0, 6.0]}}, ... % 時間範囲 [開始時間, 終了時間] (秒)
            'bufferSize', 15, ...     % バッファサイズ (5-30 秒)
            'updateBuffer', 1, ...    % バッファ更新間隔 (0.1-2.0 秒)
            'step', [], ...           % 解析窓シフト幅 (自動計算)
            'updateInterval', [] ...  % 更新間隔 (自動計算)
        ), ...
        'epoch', struct(...           % エポック化設定
            'method', 'time', ...     % 方法: 'time'/'odd-even'
            'storageType', 'array', ... % 保存形式: 'array'/'cell'
            'overlap', 0.5 ...      % オーバーラップ率 (0-0.9)
        ), ...
        'frequency', struct(...       % 周波数解析設定
            'min', 1, ...             % 最小周波数 (0.1-100 Hz)
            'max', 40, ...            % 最大周波数 (1-200 Hz)
            'bands', struct(...       % 周波数帯域定義
                'delta', [1 4], ...   % デルタ波帯域 (0.5-4 Hz)
                'theta', [4 8], ...   % シータ波帯域 (4-8 Hz)
                'alpha', [8 13], ...  % アルファ波帯域 (8-13 Hz)
                'beta',  [13 30], ... % ベータ波帯域 (13-30 Hz)
                'gamma', [30 50] ...  % ガンマ波帯域 (30-100 Hz)
            ) ...
        ), ...
        'preprocessing', struct(...   % 前処理設定
            'artifact', struct(...    % アーティファクト除去
                'enable', false, ...  % true/false: アーティファクト除去有効/無効
                'method', 'all', ...  % 方法: 'all'/'eog'/'emg'/'baseline'/'threshold'
                'thresholds', struct(...
                    'eog', 100, ...    % EOG閾値 (50-200 μV)
                    'emg', 100, ...    % EMG閾値 (50-200 μV)
                    'amplitude', 150 ... % 振幅閾値 (100-300 μV)
                ), ...
                'windowSize', 1.0 ...  % 解析窓サイズ (0.5-2.0 秒)
            ), ...
            'baseline', struct(...    % ベースライン補正 (修正後)
                'enable', false, ...  % true/false: ベースライン補正有効/無効
                'method', 'interval', ... % 方法: 'interval'/'trend'/'dc'/'moving'
                'applyToChannels', [], ... % 適用チャネル (空の場合は全チャネル) 例: [1, 3, 5]
                'windowSize', 1.0, ... % 窓サイズ (秒) - 移動平均、区間平均で使用
                'overlap', 0.5, ...     % オーバーラップ率 (0-0.9) - 区間平均で使用
                'intervalType', 'auto', ... % 区間タイプ: 'auto'/'prepost'/'custom' 'auto': 自動区間分割 (windowSize, overlapを使用) - デフォルト 'prepost': プレ/ポストベースライン区間を使用 'custom': カスタム区間を指定
                'preBaselineDuration', 0.5, ... % プレベースライン区間長 (秒, intervalType='prepost' の場合) - イベント前などのベースライン区間
                'postBaselineDuration', 0, ... % ポストベースライン区間長 (秒, intervalType='prepost' の場合) - イベント後などのベースライン区間
                'baselineIntervals', [], ... % カスタムベースライン区間 (Nx2 行列, intervalType='custom' の場合) 各行が [開始時間(秒), 終了時間(秒)] を表す区間 例: [0, 1; 5, 6; 10, 12]
                'trendType', 'polynomial', ... % トレンド除去タイプ: 'polynomial'/'linear''polynomial': 多項式フィッティング - デフォルト (3次)linear': 線形フィッティング (1次多項式)
                'polynomialOrder', 3 ...      % 多項式次数 (trendType='polynomial' の場合, 1以上の整数) - デフォルトは3
            ), ...
            'downsample', struct(...  % ダウンサンプリング設定
                'enable', false, ...  % true/false: ダウンサンプリング有効/無効
                'targetRate', 128, ... % 目標サンプリングレート (64/128/256 Hz)
                'filterOrder', 30 ...  % フィルタ次数 (10-50)
            ), ...
            'filter', struct(...      % フィルタリング設定
                'notch', struct(...   % ノッチフィルタ
                    'enable', false, ... % true/false: ノッチフィルタ有効/無効
                    'frequency', [50 60], ... % 除去周波数 ([50]/[60]/[50 60] Hz)
                    'bandwidth', 2 ...  % 帯域幅 (1-5 Hz)
                ), ...
                'fir', struct(...     % FIRフィルタ
                    'enable', true, ... % true/false: FIRフィルタ有効/無効
                    'scaledPassband', true, ... % true/false: パスバンドスケーリング
                    'filterOrder', 1024, ... % フィルタ次数 (128-2048)
                    'designMethod', 'window', ... % 設計法: 'window'/'kaiser'/'equiripple'
                    'windowType', 'hamming', ... % 窓関数: 'hamming'/'hann'/'blackman'
                    'passbandRipple', 1, ... % パスバンドリップル (0.5-3 dB)
                    'stopbandAttenuation', 60 ... % 阻止域減衰量 (40-80 dB)
                ), ...
                'iir', struct(...       % IIRフィルタ
                    'enable', false, ...    % IIRフィルタの有効/無効
                    'filterOrder', 4, ...     % IIRフィルタの次数
                    'designMethod', 'butterworth', ... % 'butterworth', 'chebyshev1', 'chebyshev2', 'ellip'
                    'filterType', 'bandpass', ...     % 'bandpass', 'lowpass', 'highpass', 'bandstop'
                    'passbandRipple', 1, ...          % Chebyshev1, Elliptic の場合
                    'stopbandAttenuation', 60 ...     % Chebyshev2, Elliptic の場合
                )...
            ) ...
        ) ...
    );

    %% === 特徴抽出設定 ===
    % 特徴量抽出に関する設定
    feature = struct(...
        'power', struct(...            % パワースペクトル解析設定
            'enable', true, ...       % true/false: パワー解析有効/無効
            'method', 'welch', ...     % 解析方法: 'welch'/'filter'
            'normalize', struct(...    % パワー正規化設定
                'enable', false, ...   % true/false: 正規化有効/無効
                'methods', {{'relative', 'log'}} ... % 'relative'/'log'/'zscore'/'db'
            ), ...
            'welch', struct(...        % Welch法パラメータ
                'windowType', 'hamming', ... % 窓関数: 'hamming'/'hann'/'blackman'
                'windowLength', 256, ... % 窓長 (128-1024 サンプル)
                'overlap', 0.5, ...    % オーバーラップ率 (0-0.9)
                'nfft', 512, ...       % FFTポイント数 (256-2048)
                'freqResolution', 0.5, ... % 周波数分解能 (0.1-2.0 Hz)
                'segmentNum', 8 ...    % 平均化セグメント数 (4-16)
            ), ...
            'filter', struct(...       % フィルタリング法パラメータ
                'type', 'butter', ...  % フィルタタイプ: 'butter'/'cheby1'/'ellip'
                'order', 4 ...         % フィルタ次数 (2-8)
            ), ...
            'bands', struct(...        % 周波数帯域設定
                'names', {{'delta', 'theta', 'alpha', 'beta', 'gamma'}}, ...
                'delta', [0.5 4], ...  % デルタ波帯域 (0.5-4 Hz)
                'theta', [4 8], ...    % シータ波帯域 (4-8 Hz)
                'alpha', [8 13], ...   % アルファ波帯域 (8-13 Hz)
                'beta',  [13 30], ...  % ベータ波帯域 (13-30 Hz)
                'gamma', [30 45] ...   % ガンマ波帯域 (30-100 Hz)
            ) ...
        ), ...
        'faa', struct(...             % FAA特徴抽出設定
            'enable', true, ...      % true/false: FAA解析有効/無効
            'channels', struct(...    % チャンネル設定
                'left', [1], ...      % 左前頭部チャンネル (配列)
                'right', [14] ...     % 右前頭部チャンネル (配列)
            ), ...
            'threshold', 0 ...        % FAA判定閾値 (-1-1)
        ), ...
        'abRatio', struct(...         % α/β比設定
            'enable', false, ...      % true/false: α/β比解析有効/無効
            'channels', struct(...    % チャンネル設定
                'left', [1], ...      % 左前頭部チャンネル (配列)
                'right', [14] ...     % 右前頭部チャンネル (配列)
            ), ...
            'threshold', 1.0 ...      % 判定閾値 (0.5-2.0)
        ), ...
        'emotion', struct(...         % 感情特徴抽出設定
            'enable', false, ...      % true/false: 感情解析有効/無効
            'channels', struct(...    % チャンネル設定
                'left', [1], ...      % 左前頭部チャンネル (配列)
                'right', [14] ...     % 右前頭部チャンネル (配列)
            ), ...
            'threshold', 0.3, ...     % 判定閾値 (0.1-0.5)
            'labels', struct(...      % 感情ラベル設定
                'states', {{'興奮', '喜び', '快適', 'リラックス', ...
                           '眠気', '憂鬱', '不快', '緊張', '安静'}}, ... % 感情状態
                'neutral', '安静' ...  % 中立状態
            ), ...
            'coordinates', struct(... % 座標変換設定
                'normalizeMethod', 'tanh', ... % 正規化方法: 'tanh'/'sigmoid'/'linear'
                'scaling', 1.0 ...    % スケーリング係数 (0.1-2.0)
            ) ...
        ) ...
    );

    %% === 分類器設定 ===
    % 分類器のパラメータ設定
    num_classes = size(trigger_mappings, 1);  % クラス数を動的設定
    
    classifier = struct(...
        'activeClassifier', 'cnn', ... % 使用分類器: 'svm'/'ecoc'/'cnn'/'lstm'/'hybrid'
        'threshold', 0.5, ...
        'csp', struct(...            % CSP特徴抽出設定
            'patterns', 8, ...        % パターン数 (3-10)
            'regularization', 0.05 ... % 正則化パラメータ (0.01-0.1)
        ), ...
        'normalize', struct(...
            'enable', true, ...
            'type', 'all', ...
            'method', 'zscore' ...
         ), ...
         'augmentation', struct(... % データ拡張設定
            'enable', false, ...     % データ拡張を有効化
            'augmentationRatio', 2, ... % SVMに適した控えめな拡張率
            'combinationLimit', 2, ... % 一度に適用する手法の上限
            'methods', struct(... % 拡張手法設定
                'noise', struct(... % ノイズ付加
                    'enable', true, ...
                    'types', {{'pink', 'brown'}}, ... % EEGに最適なノイズタイプの優先順
                    'variance', 0.01, ... % 特徴量レベルに適した分散値
                    'probability', 0.5 ... % 適用確率
                ), ...
                'scaling', struct(... % スケーリング
                    'enable', true, ...
                    'range', [0.9, 1.1], ... % 控えめなスケーリング範囲
                    'perChannel', false, ... % 特徴量レベルではチャンネルごとのスケーリングは不要
                    'probability', 0.5 ... % 適用確率
                ), ...
                'timeshift', struct(... % 時間シフト（特徴量レベルでは適用されない）
                    'enable', false, ...
                    'maxShift', 0.1, ...
                    'perChannel', true, ...
                    'probability', 0.5 ...
                ), ...
                'mirror', struct(... % 振幅反転（特徴量レベルでは適用されない）
                    'enable', false, ...
                    'probability', 0.2 ...
                ), ...
                'channelSwap', struct(... % チャンネル入れ替え（特徴量レベルでは適用されない）
                    'enable', false, ...
                    'pairs', {{...
                        {'F3', 'F4'}, ...
                        {'FC1', 'FC2'}, ...
                        {'C3', 'C4'}, ...
                        {'CP1', 'CP2'}, ...
                        {'P3', 'P4'}, ...
                        {'FC5', 'FC6'}, ...
                        {'CP5', 'CP6'}, ...
                        {'T7', 'T8'}, ...
                        {'Fp1', 'Fp2'}, ...
                        {'O1', 'O2'} ...
                    }}, ...
                    'probability', 0.4 ...
                ), ...
                'frequencyNoise', struct(... % 周波数選択的雑音（特徴量レベルでは適用されない）
                    'enable', false, ...
                    'freqBands', {{[8, 13], [9, 11], [13, 30]}}, ...
                    'level', 0.2, ...
                    'probability', 0.4 ...
                ), ...
                'timeReverse', struct(... % 時間反転（特徴量レベルでは適用されない）
                    'enable', false, ...
                    'probability', 0.2 ...
                ), ...
                'bandpowerAdjust', struct(... % バンドパワー調整（特徴量レベルでは適用されない）
                    'enable', false, ...
                    'bands', struct(...
                        'alpha', [8, 13], ...
                        'beta', [13, 30], ...
                        'mu', [9, 11] ...
                    ), ...
                    'scaleRange', [0.8, 1.7], ...
                    'probability', 0.6 ...
                ), ...
                'filtering', struct(... % フィルタリング（特徴量レベルでは適用されない）
                    'enable', false, ...
                    'types', {{'bandpass', 'bandstop'}}, ...
                    'order', 4, ...
                    'freqRange', [8, 30], ...
                    'probability', 0.3 ...
                ) ...
            ) ...
        ), ...
        'svm', struct(...              % SVMの設定
            'enable', false, ...        % true/false: SVM有効/無効
            'optimize', true, ...      % true/false: パラメータ最適化有効/無効
            'probability', true, ...   % true/false: 確率出力有効/無効
            'kernel', 'rbf', ...       % カーネル関数: 'linear'/'rbf'/'polynomial'
            'validation', struct(...
                    'enable', true, ... % true/false: 交差検証有効/無効
                    'kfold', 5 ...     % 交差検証のフォールド数
            ), ...
            'hyperparameters', struct(... % ハイパーパラメータ
                'optimizer', 'auto', ... % 最適化法: 'auto'/'grid'
                'boxConstraint', [0.1, 1, 10, 100], ... % Cパラメータ候補
                'kernelScale', [0.1, 1, 10, 100] ... % カーネルスケール候補
            ) ...
        ), ...
        'ecoc', struct(...            % ECOC設定
            'enable', false, ...      % true/false: ECOC有効/無効
            'optimize', false, ...    % true/false: パラメータ最適化有効/無効
            'probability', true, ...  % true/false: 確率出力有効/無効
            'kernel', 'rbf', ...      % カーネル関数: 'linear'/'rbf'/'polynomial'
            'coding', 'onevsall', ... % コーディング: 'onevsall'/'allpairs'
            'learners', 'svm', ...    % 基本学習器: 'svm'/'tree'
            'validation', struct(...
                    'enable', true, ...
                    'kfold', 5 ...
            ), ...
            'hyperparameters', struct(... % ハイパーパラメータ
                'optimizer', 'gridsearch', ... % 最適化法: 'gridsearch'
                'boxConstraint', [0.01, 0.05, 0.1, 0.5, 1, 2, 5, 10, 20, 50, 100], ... % より詳細なCパラメータ候補
                'kernelScale', [0.01, 0.05, 0.1, 0.5, 1, 2, 5, 10, 20, 50, 100] ... % より詳細なカーネルスケール候補
            ) ...
        ), ...
        'cnn', struct(...
            'enable', false, ...
            'gpu', true, ...
            'optimize', true, ...
            'architecture', struct(...
                'numClasses', num_classes, ...
                'convLayers', struct(...
                    'conv1', struct('size', [7 3], 'filters', 32, 'stride', 1, 'padding', 'same'), ...
                    'conv2', struct('size', [5 3], 'filters', 64, 'stride', 1, 'padding', 'same'), ...
                    'conv3', struct('size', [3 3], 'filters', 128, 'stride', 1, 'padding', 'same') ...
                ), ...
                'poolLayers', struct(...
                    'pool1', struct('size', 2, 'stride', 2), ...
                    'pool2', struct('size', 2, 'stride', 2), ...
                    'pool3', struct('size', 2, 'stride', 2) ...
                ), ...
                'dropoutLayers', struct(...
                    'dropout1', 0.3, ...
                    'dropout2', 0.4, ...
                    'dropout3', 0.5 ...
                ), ...
                'batchNorm', true, ...
                'fullyConnected', [128 64] ...
            ), ...
            'training', struct(...
                'optimizer', struct(...
                    'type', 'adam', ...
                    'learningRate', 0.001, ...  % 初期値
                    'beta1', 0.9, ...
                    'beta2', 0.999, ...
                    'epsilon', 1e-8 ...
                ), ...
                'maxEpochs', 150, ...
                'miniBatchSize', 64, ...
                'frequency', 1, ...
                'patience', 20, ...
                'shuffle', 'every-epoch', ...
                'validation', struct(...
                    'enable', true, ...
                    'repetitions', 5, ...
                    'kfold', 4 ...
                ) ...
            ), ...
            'optimization', struct(...
                'searchAlgorithm', 'lhs', ...  % lhs / grid / random
                'maxTrials', 2, ...
                'searchSpace', struct(...
                    'learningRate', [0.0001, 0.01], ...
                    'miniBatchSize', [32, 128], ...
                    'numConvLayers', [1, 6], ...
                    'filterSize', [3, 7], ...
                    'numFilters', [16, 128], ...
                    'dropoutRate', [0.3, 0.7], ...
                    'fcUnits', [64, 256] ...
                ) ...
            ) ...
        ), ...
        'lstm', struct(...
            'enable', false, ...
            'gpu', true, ...
            'optimize', false, ...
            'architecture', struct(...
                'numClasses', num_classes, ...
                'batchNorm', false, ... 
                'fullyConnected', [128 64], ...
                'sequenceInputLayer', struct(...
                    'inputSize', [], ...         % チャンネル数：自動入力
                    'sequenceLength', [], ...     % サンプル数：自動入力
                    'normalization', 'none' ...
                ), ...
                'lstmLayers', struct(...
                    'lstm1', struct('numHiddenUnits', 128, 'OutputMode', 'sequence'), ...
                    'lstm2', struct('numHiddenUnits', 64, 'OutputMode', 'last') ...
                ), ...
                'dropoutLayers', struct(...
                    'dropout1', 0.3, ...
                    'dropout2', 0.3 ...
                ) ...
            ), ...
            'training', struct(...
                'optimizer', struct(...
                    'type', 'adam', ...
                    'learningRate', 0.001, ...  % 初期値
                    'beta1', 0.9, ...
                    'beta2', 0.999, ...
                    'epsilon', 1e-8, ...
                    'gradientThreshold', 1 ...
                ), ...
                'maxEpochs', 100, ...
                'miniBatchSize', 64, ...
                'frequency', 1, ...
                'patience', 20, ...
                'shuffle', 'every-epoch', ...
                'validation', struct(...
                    'enable', false, ...
                    'repetitions', 5, ...
                    'kfold', 4 ...
                ) ...
            ), ...
            'optimization', struct(...
                'searchAlgorithm', 'lhs', ...  % lhs / grid / random
                'maxTrials', 50, ...
                'searchSpace', struct(...
                    'learningRate', [0.0001, 0.01], ...
                    'miniBatchSize', [32, 128], ...
                    'lstmUnits', [32, 256], ...
                    'numLayers', [1, 6], ...
                    'dropoutRate', [0.2, 0.7], ...
                    'fcUnits', [32, 256] ...
                ) ...
            ) ...
        ), ...
        'hybrid', struct(...
            'enable', false, ...
            'gpu', true, ...
            'optimize', false, ...
            'architecture', struct(...
                'numClasses', num_classes, ...
                'cnn', struct(... 
                    'batchNorm', true, ... 
                    'convLayers', struct(...
                        'conv1', struct('size', [7 3], 'filters', 32, 'stride', 1, 'padding', 'same'), ...
                        'conv2', struct('size', [5 3], 'filters', 64, 'stride', 1, 'padding', 'same'), ...
                        'conv3', struct('size', [3 3], 'filters', 128, 'stride', 1, 'padding', 'same') ...
                    ), ...
                    'poolLayers', struct(...
                        'pool1', struct('size', [2 1], 'stride', [2 1]), ...
                        'pool2', struct('size', [2 1], 'stride', [2 1]), ...
                        'pool3', struct('size', [2 1], 'stride', [2 1]) ...
                    ), ...
                    'dropoutLayers', struct(...
                        'dropout1', 0.3, ...
                        'dropout2', 0.4, ...
                        'dropout3', 0.5 ...
                    ), ...
                    'fullyConnected', 128 ...
                ), ...
                'lstm', struct(...      % LSTM部分の設定
                    'batchNorm', false, ...
                    'sequenceInputLayer', struct(...
                        'inputSize', [], ...        % チャンネル数：自動入力
                        'sequenceLength', [], ...    % サンプル数：自動入力
                        'normalization', 'none' ...
                    ), ...
                    'lstmLayers', struct(...
                        'lstm1', struct('numHiddenUnits', 128, 'OutputMode', 'sequence'), ...
                        'lstm2', struct('numHiddenUnits', 128, 'OutputMode', 'sequence'), ...
                        'lstm3', struct('numHiddenUnits', 64, 'OutputMode', 'last') ...
                    ), ...
                    'dropoutLayers', struct(...
                        'dropout1', 0.3, ...
                        'dropout2', 0.3, ...
                        'dropout3', 0.3 ...
                    ), ...
                    'fullyConnected', 64 ...
                ), ...
                'merge', struct(...    % 特徴統合部分
                    'concat', struct(...
                        'dimension', 3, ...
                        'numInputs', 2, ...
                        'name', 'concat' ...
                    ), ...
                    'globalPooling', struct(...
                        'enable', true, ...
                        'name', 'gavg' ...
                    ), ...
                    'fullyConnected', struct(...
                        'layers', [struct('units', 64, 'name', 'fc_merge1')], ...
                        'activation', 'relu' ...
                    ), ...
                    'dropout', struct(...
                        'rate', 0.4, ...  
                        'name', 'dropout_merge' ...
                    ), ...
                    'output', struct(...
                        'activation', 'softmax', ...
                        'name', 'output' ...
                    ) ...
                ) ...
            ), ...
            'training', struct(...
                'optimizer', struct(...
                    'type', 'adam', ...
                    'learningRate', 0.0001, ...
                    'beta1', 0.9, ...
                    'beta2', 0.999, ...
                    'epsilon', 1e-8, ...
                    'gradientThreshold', 1 ...
                ), ...
                'maxEpochs', 150, ...
                'miniBatchSize', 50, ...
                'frequency', 1, ...
                'patience', 20, ...
                'shuffle', 'every-epoch', ...
                'validation', struct(...
                    'enable', true, ...
                    'repetitions', 5, ...
                    'kfold', 4 ...
                ) ...
            ), ...
            'adaBoost', struct(...     % 分類器設定（AdaBoostM2）
                'numLearners', 100, ... 
                'learnRate', 0.1 ...
            ), ...
            'optimization', struct(...  % 最適化処理のパラメータ
                'searchAlgorithm', 'lhs', ...  % lhs / grid / random
                'maxTrials', 10,  ...
                'searchSpace', struct(...     % 論文の実験範囲に基づいて調整
                    'learningRate', [0.0001, 0.01], ...  % 論文ではより広い範囲でテスト
                    'miniBatchSize', [32, 128], ...         % 論文の実験範囲
                    'numConvLayers', [1, 6], ...           % 論文では層数を1〜6でテスト
                    'cnnFilters', [16, 128], ...           % 論文のニューロン数範囲
                    'filterSize', [3, 7], ...              % 論文のフィルタサイズ
                    'lstmUnits', [32, 256], ...            % 論文のユニット数範囲
                    'numLstmLayers', [1, 6], ...           % 論文ではLSTM層数を広範囲でテスト
                    'dropoutRate', [0.3, 0.7], ...
                    'fcUnits', [64, 256] ...               % 論文の全結合層ユニット範囲
                ) ...
            ) ...
        ), ...
        'evaluation', struct(...        % 評価設定
            'enable', true, ...         % true/false: 評価機能有効/無効
            'metrics', struct(...        % 評価指標設定
                'accuracy', true, ...    % true/false: 正解率評価
                'precision', true, ...   % true/false: 適合率評価
                'recall', true, ...      % true/false: 再現率評価
                'f1score', true, ...     % true/false: F1スコア評価
                'auc', true, ...         % true/false: AUC評価
                'confusion', true ...    % true/false: 混同行列評価
            ), ...
            'visualization', struct(...   % 可視化設定
                'enable', true, ...      % true/false: 可視化機能有効/無効
                'confusionMatrix', true, ... % true/false: 混同行列表示
                'roc', true, ...            % true/false: ROC曲線表示
                'learningCurve', true, ...  % true/false: 学習曲線表示
                'featureImportance', true ... % true/false: 特徴量重要度表示
            ) ...
        ) ...
    );

    %% === GUI表示設定 ===
    % GUI表示に関する設定
    gui = struct(...
        'display', struct(...          % 表示設定
            'visualization', struct(... % 可視化設定
                'refreshRate', 0.2, ... % 表示更新レート (0.1-1.0 秒)
                'enable', struct(...    % 表示項目の有効/無効
                    'rawData', false, ... % true/false: 生データ表示
                    'emgData', false, ... % true/false: EMGデータ表示
                    'spectrum', false, ... % true/false: スペクトル表示
                    'ersp', false ...     % true/false: ERSP表示
                ), ...
                'channels', struct(...  % チャンネル表示設定
                    'eeg', struct(...   % EEGチャンネル
                        'display', [1 2 3], ... % 表示チャンネル番号
                        'names', {{'AF3','F7','F3'}} ... % チャンネル名
                    ), ...
                    'emg', struct(...   % EMGチャンネル
                        'display', [1 2], ... % 表示チャンネル番号
                        'names', {{'EMG1','EMG2'}} ... % チャンネル名
                    ) ...
                ), ...
                'scale', struct(...     % スケール設定
                    'auto', true, ...   % true/false: 自動スケーリング
                    'raw', [-100 100], ... % 生データ表示範囲 (μV)
                    'emg', [-1000 1000], ... % EMG表示範囲 (μV)
                    'freq', [0 50], ... % 周波数表示範囲 (Hz)
                    'power', [0.01 100], ... % パワー表示範囲 (μV²/Hz)
                    'displaySeconds', 5 ... % 表示時間幅 (1-30 秒)
                ), ...
                'showBands', true, ... % true/false: 周波数帯域表示
                'ersp', struct(...     % ERSP表示設定
                    'scale', [0 100], ... % ERSP表示範囲 (dB)
                    'time', [0 5], ...    % 時間範囲 (秒)
                    'baseline', [-1 0], ... % ベースライン期間 (秒)
                    'freqRange', [1 50], ... % 周波数範囲 (Hz)
                    'numFreqs', 50, ...     % 周波数分割数 (20-100)
                    'method', 'wavelet', ... % 解析手法: 'wavelet'/'stft'
                    'colormap', struct(...   % カラーマップ設定
                        'type', 'jet', ...   % タイプ: 'jet'/'parula'/'viridis'
                        'reverse', false, ... % true/false: 反転
                        'limit', 'sym', ...  % 制限方法: 'sym'/'pos'/'neg'
                        'background', 'white' ... % 背景色: 'white'/'black'
                    ) ...
                ) ...
            ) ...
        ) ...
    );

    %% === プリセット構造体の構築 ===
    % 設定をプリセット構造体にまとめる
    preset = struct();
    preset.info = preset_info;           % プリセット情報
    preset.acquisition = acquisition;     % データ収集設定
    preset.lsl = lsl;                    % LSL設定
    preset.udp = udp;                    % UDP設定
    preset.signal = signal;              % 信号処理設定
    preset.feature = feature;            % 特徴抽出設定
    preset.classifier = classifier;       % 分類器設定
    preset.gui = gui;                    % GUI設定
end